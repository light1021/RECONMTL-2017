/************************************************************************************************************
*	This application is a TRAINING TARGET for exercises in HACKING Intel� SGX ENCLAVES.                     *
*	This application made vulnerable DELIBERATELY - its main purpose is to demonstrate, shame and blame     *
*   common mistakes usually made with SGX enclave programming.                                              *
*   ONCE AGAIN, IT CONTAINS MISTAKES.                                                                       *
*   Please DO NOT USE it's source for any healthy development/production activity.                          *
*	It is intended to use for training of hacking SGX enclaves ONLY.                                        *
*	It is written ugly(deliberately), designed badly(intentionally) and running very slow.		        	*
*	You can freely use this application for training purposes.												*
*	I'd be glad to hear about your progress.    															*
*																											*
*	This application requires QT5.8 (which uses LGPL v3 license), Intel SGX SDK and							*
*   the Intel� Software Guard Extensions SSL (Intel� SGX SSL) to be compiled.								*
*	This application is written by Michael Atlas (wireshrink@gmail.com) during 2017.						*
*	Happy hacking.																							*
*************************************************************************************************************/


/*
enclave inerfaces list:
*/


enclave {

	from "sgx_tsgxssl.edl" import *;

    trusted {
        /* define ECALLs here. */
		public int ecall_init_enclave([in, string] char *storage_folder, [in, string]char * address, int port); // inits storage folder with default data if nothing exists, stores server data inside

		public int ecall_update_epg  ();								  // download the EPG
		public int ecall_get_epg_page(int number, size_t strsize, [out, size=strsize] void* page); // gets a page of EPG 
		public int ecall_prepare_movie  (size_t movie_id);  // prepares the movie for playing if allowed, updates balance
		public int ecall_get_movie_chunk(size_t chunk_offset, size_t chunk_size, [out, size=chunk_size] void* chunk); // gets a chunk of the previously prepared movie encrypted with secure channel key 
		public int ecall_get_movie_file_size(size_t movie_id, [out]size_t* size ); // gets a size of decrypted movie

		public int ecall_try_coupon([in, string] char *coupon); // tryes a coupon and updates a balance
		public int ecall_get_balance([out] int *balance); //  gets a balance to show
		public int ecall_write_log(size_t logsize, [in, size = logsize] char* logstr); // writes sealed log

    };

    untrusted {
        /* define OCALLs here. */
		
		void* ocall_file_open ([in,string] char* file_name, [in,string] char* format);
		
		int ocall_file_close([user_check]void* handle); //size_t is used foir passing a file pointer
        
		int ocall_file_read([user_check]void* handle, size_t offset, size_t datasize, [out, size = datasize]unsigned char *data); 
        
		int ocall_file_write([user_check]void *handle, size_t datasize, [in, size = datasize]unsigned char *data);

		size_t ocall_file_size ([user_check] void* file_handle);

		void* ocall_socket_connect ([in, string]char *url, unsigned int port  );
		void ocall_socket_shutdown ([user_check] void* socket);
		int ocall_get_the_current_time([out] unsigned char thetime[16]);
    };
};
