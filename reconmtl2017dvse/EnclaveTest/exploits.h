#pragma once

/************************************************************************************************************
*	This application is a TRAINING TARGET for exercises in HACKING Intel® SGX ENCLAVES.                     *
*	This application made vulnerable DELIBERATELY - its main purpose is to demonstrate, shame and blame     *
*   common mistakes usually made with SGX enclave programming.                                              *
*   ONCE AGAIN, IT CONTAINS MISTAKES.                                                                       *
*   Please DO NOT USE it's source for any healthy development/production activity.                          *
*	It is intended to use for training of hacking SGX enclaves ONLY.                                        *
*	It is written ugly(deliberately), designed badly(intentionally) and running very slow.		        	*
*	You can freely use this application for training purposes.												*
*	I'd be glad to hear about your progress.    															*
*																											*
*	This application requires QT5.8 (which uses LGPL v3 license), Intel SGX SDK and							*
*   the Intel® Software Guard Extensions SSL (Intel® SGX SSL) to be compiled.								*
*	This application is written by Michael Atlas (wireshrink@gmail.com) during 2017.						*
*	Happy hacking.																							*
*************************************************************************************************************/


// EnclaveTest.cpp : Enclave exploiot template project
//

#include "SGXware.h"

#include "sgx_urts.h"
#include "sgx_uae_service.h"
#include "DVSE_u.h"

extern sgx_enclave_id_t global_eid;

void e0_exfiltrate_data		(char* server_ip, int port, char* library_fiolder);
void e1_timing_attack		(char* server_ip, int port, char* library_fiolder);
void e2_file_substitution	(char* server_ip, int port, char* library_fiolder);
void e3_blob_reuse		    (char* server_ip, int port, char* library_fiolder);
void e4_time_substitution	(char* server_ip, int port, char* library_fiolder);
void e5_crypto_extraction   (char* server_ip, int port, char* library_fiolder);


// this fuinction is used to configure current time value substitution in the corresponding OCALL
// if the first parameter is set as true, the corresponding fake value will be 
// returned from ocall instead of the current one
void substitute_time(bool substitute, unsigned char *fake_time);
// this fuinction is used to configure file name value substitution in the corresponding OCALL
// if the first parameter is set as true, the corresponding fake value will be 
// used in ocall instead of passed from enclave
void substitute_file_name(bool substitute, unsigned char *fake_file_name);
void substitute_format(bool substitute, unsigned char *fake_format);
void close_last_opened_file(void);
void set_print_mode(bool mode);
void set_write_mode(bool to_mem);